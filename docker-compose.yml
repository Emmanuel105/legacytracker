services:
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=legacy_academy_db
      - POSTGRES_USER=legacy_user
      - POSTGRES_PASSWORD=secure_password123
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U legacy_user"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"  # Expose for debugging and Metabase connection

  web:
    build: .
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env.docker
    environment:
      - PYTHONUNBUFFERED=1

  nginx:
    image: nginx:alpine
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    depends_on:
      - web
    profiles:
      - production  # Only start nginx in production profile

  # Metabase for analytics (optional for development)
  metabase:
    image: metabase/metabase:latest
    ports:
      - "3000:3000"
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=legacy_academy_db
      - MB_DB_PORT=5432
      - MB_DB_USER=legacy_user
      - MB_DB_PASS=secure_password123
      - MB_DB_HOST=db
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - metabase  # Only start when explicitly requested
    volumes:
      - metabase_data:/metabase-data

volumes:
  postgres_data:
  static_volume:
  media_volume:
  metabase_data: