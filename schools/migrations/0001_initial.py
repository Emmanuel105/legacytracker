# Generated by Django 4.2.17 on 2025-07-17 05:43

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('role', models.CharField(choices=[('SUPER_ADMIN', 'Super Administrator'), ('SCHOOL_ADMIN', 'School Administrator'), ('TEACHER', 'Teacher'), ('FIELD_OFFICER', 'Field Officer')], default='TEACHER', max_length=20)),
                ('employee_number', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[A-Z0-9]+$', 'Employee number must be uppercase letters and numbers')])),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('is_password_changed', models.BooleanField(default=False, help_text='Whether user has changed default password')),
            ],
            options={
                'ordering': ['school', 'last_name', 'first_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('code', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator('^[A-Z0-9]+$', 'School code must be uppercase letters and numbers only')])),
                ('address', models.TextField()),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True)),
                ('school_start_time', models.TimeField(default='07:30')),
                ('school_end_time', models.TimeField(default='14:30')),
                ('attendance_cutoff_time', models.TimeField(default='08:00', help_text='Students arriving after this time are marked as late')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('boundary_coordinates', models.JSONField(blank=True, default=dict, help_text='JSON array of coordinates defining zone boundaries')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='zones', to='schools.school')),
            ],
            options={
                'ordering': ['school', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SchoolSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('absence_threshold_days', models.PositiveIntegerField(default=2, help_text='Number of absences in rolling period to trigger flag')),
                ('absence_monitoring_period', models.PositiveIntegerField(default=7, help_text='Rolling period in days for absence monitoring')),
                ('auto_generate_visits', models.BooleanField(default=True, help_text='Automatically generate home visits for flagged students')),
                ('visit_priority_threshold', models.PositiveIntegerField(default=3, help_text='Number of absences for high priority visits')),
                ('notify_parents_sms', models.BooleanField(default=False)),
                ('notify_admin_email', models.BooleanField(default=True)),
                ('daily_report_time', models.TimeField(default='16:00', help_text='Time to send daily attendance reports')),
                ('term_start_date', models.DateField(blank=True, null=True)),
                ('term_end_date', models.DateField(blank=True, null=True)),
                ('school', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to='schools.school')),
            ],
            options={
                'verbose_name': 'School Settings',
                'verbose_name_plural': 'School Settings',
            },
        ),
        migrations.AddIndex(
            model_name='school',
            index=models.Index(fields=['code'], name='schools_sch_code_22aa88_idx'),
        ),
        migrations.AddIndex(
            model_name='school',
            index=models.Index(fields=['is_active'], name='schools_sch_is_acti_522730_idx'),
        ),
        migrations.AddField(
            model_name='user',
            name='assigned_zones',
            field=models.ManyToManyField(blank=True, help_text='Zones assigned to field officers', related_name='assigned_officers', to='schools.zone'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='school',
            field=models.ForeignKey(blank=True, help_text='School assignment (null for super admins)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='schools.school'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='zone',
            unique_together={('name', 'school')},
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['employee_number'], name='schools_use_employe_5aca60_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='schools_use_role_f232e2_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['school', 'role'], name='schools_use_school__486ddc_idx'),
        ),
    ]
